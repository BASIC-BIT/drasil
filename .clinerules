# Discord Anti-Spam Bot: Project Intelligence

This file captures important patterns, preferences, and project intelligence that help me work more effectively with you and the project. It serves as a learning journal that evolves as we work together.

## Project Structure Patterns

- **Source Code Organization**: 
  - `src/` contains all source code
  - `src/services/` contains core business logic services
  - `src/repositories/` implements the data access layer
  - `src/config/` manages configuration and environment variables
  - `src/__tests__/` contains test files mirroring the source structure
  - `src/__mocks__/` contains mock implementations for testing
  - `supabase/migrations/` contains database schema migrations

- **Naming Conventions**:
  - Services end with `Service.ts` (e.g., `GPTService.ts`)
  - Repositories end with `Repository.ts` (e.g., `ServerRepository.ts`)
  - Test files end with `.test.ts` (e.g., `GPTService.test.ts`)
  - Real API tests end with `.realapi.test.ts` (run selectively)
  - Interfaces are PascalCase (e.g., `UserProfileData`)
  - Methods are camelCase (e.g., `findByGuildId`)
  - Private properties are prefixed with underscore (e.g., `_client`)
  - Constants are UPPER_SNAKE_CASE (e.g., `MESSAGE_THRESHOLD`)

- **Implementation Patterns**:
  - Repository pattern for data access
  - Service pattern for business logic
  - Dependency injection for loose coupling
  - Event-driven architecture for Discord interactions
  - Cache-first approach for frequently accessed data
  - Command pattern for slash commands and button interactions
  - Factory methods for creating complex objects
  - Builder pattern for Discord embeds and components

## Development Workflow

- **Test-Driven Development**:
  - Write tests first to define expected behavior
  - Implement functionality to pass tests
  - Refactor while maintaining test coverage
  - Mock external dependencies (Discord, OpenAI, Supabase)

- **Iterative Development**:
  - Complete one chunk before moving to the next
  - Each chunk builds on previous functionality
  - Maintain working state at each step
  - Focus on core functionality first, then enhancements

- **Documentation Updates**:
  - Update `progress.md` when completing features
  - Update `activeContext.md` when shifting focus
  - Update other files as architecture or context evolves
  - Document key decisions and their rationale

## Technical Preferences

- **TypeScript Best Practices**:
  - Use explicit typing rather than `any`
  - Leverage interfaces for clear contracts
  - Use type guards for runtime type checking
  - Prefer readonly properties when possible
  - Use generics for type-safe collections
  - Leverage union types for state representation
  - Use optional chaining and nullish coalescing

- **Testing Approach**:
  - Mock external dependencies (Discord, OpenAI, Supabase)
  - Test behavior rather than implementation details
  - Use descriptive test names that explain the expected behavior
  - Group tests logically with describe blocks
  - Use beforeEach for test setup
  - Test both success and error paths
  - Use test.each for parameterized tests

- **Error Handling**:
  - Comprehensive error catching in Bot.ts
  - Service-specific error handling
  - Graceful degradation when services fail
  - Custom error classes for specific error types
  - Detailed error logging with context
  - User-friendly error messages for interactions
  - Default to safe values when errors occur

## Project-Specific Insights

- **GPT Usage Optimization**:
  - Only use GPT for borderline cases or new users
  - Implement caching to avoid redundant API calls
  - Use few-shot examples for improved accuracy
  - Current model: gpt-4o-mini
  - Temperature: 0.3 for more consistent responses
  - Max tokens: 50 to limit response size
  - System prompt defines the assistant as a moderation helper
  - Few-shot examples in four categories (clearly suspicious, borderline suspicious, borderline normal, clearly normal)

- **Discord Interaction Patterns**:
  - Button interactions expire after 15 minutes
  - Use ephemeral responses for admin-only information
  - Format embeds consistently for better readability
  - Button custom IDs follow format: action_userId
  - Slash commands registered globally
  - Required gateway intents: Guilds, GuildMessages, MessageContent, GuildMembers
  - Notification embeds use consistent color coding (red for suspicious)
  - Action logging updates the original notification message

- **Configuration Management**:
  - Environment variables for sensitive data
  - Database-backed configuration for server-specific settings
  - Caching for frequently accessed configurations
  - Server configurations follow a cache-first approach:
    1. Check in-memory cache
    2. Look up in database
    3. Create default if not found
    4. Update cache
    5. Return result
  - Default settings defined in GlobalConfig
  - Server-specific settings stored as JSONB in database
  - Environment variables as fallback for critical settings

- **Detection Strategy**:
  - Heuristic checks run first for efficiency
  - Message frequency threshold: 5 messages in 10 seconds
  - Suspicious keywords defined in HeuristicService
  - New account threshold: 7 days
  - New server member threshold: 3 days
  - Borderline suspicion range: 0.3-0.7
  - Final classification threshold: 0.5 (above = SUSPICIOUS)
  - Confidence calculation: Math.abs(suspicionScore - 0.5) * 2

- **Database Structure**:
  - Primary tables: servers, users (planned), server_members (planned)
  - Server settings stored as JSONB for flexibility
  - UUID primary keys generated by Supabase
  - Row-level security enabled on all tables
  - Repository pattern with three layers:
    1. BaseRepository (interface)
    2. SupabaseRepository (generic implementation)
    3. Specific repositories (ServerRepository, etc.)

## Known Challenges

- **Rate Limiting**:
  - Discord API has various rate limits per endpoint
  - OpenAI API has token-based rate limits
  - No sophisticated rate limiting implemented yet
  - Potential for quota exhaustion in high-traffic scenarios

- **Large Server Performance**:
  - Message history tracking could consume memory
  - Database connection limits not configured
  - Caching strategy needed for high-volume servers
  - Not tested with very large servers (10,000+ members)

- **Testing Discord Interactions**:
  - Discord.js client is complex to mock
  - Button interactions require special handling
  - Event-based architecture complicates testing
  - Integration tests needed for full workflow verification

- **Configuration Management**:
  - Environment variables used for some configuration
  - No web interface for configuration management
  - Limited validation of configuration values
  - Database schema evolution strategy needed

## Future Considerations

- **Database Schema Evolution**:
  - Need migration strategy for schema changes
  - Consider backward compatibility for updates
  - Plan for data migration between versions
  - Design for extensibility with JSONB fields

- **Cross-Server Data Sharing**:
  - Privacy implications of sharing user data
  - Security considerations for trusted networks
  - Consent and opt-out mechanisms
  - Data retention and deletion policies

- **Custom AI Model**:
  - Training data collection from real examples
  - Model fine-tuning process
  - Evaluation framework for performance
  - Version management and updates
  - Fallback strategy for model failures

- **Scaling Considerations**:
  - Database connection pooling
  - Horizontal scaling for multiple instances
  - Caching strategies for performance
  - Cost optimization for widespread adoption
  - Monitoring and alerting infrastructure

This document will evolve as we continue working together on the project, capturing new insights and patterns to improve our collaboration.