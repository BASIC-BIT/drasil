@startuml Architecture Diagram

!define REPO #AliceBlue
!define SERVICE #LightGreen
!define UTIL #LightGoldenRodYellow
!define CONFIG #LightGrey
!define EXTERNAL #White
!define DB #Orange

skinparam class {
    BackgroundColor SERVICE
    ArrowColor #555555
    BorderColor #555555
}

skinparam rectangle {
    BackgroundColor REPO
    ArrowColor #555555
    BorderColor #555555
}

skinparam database {
    BackgroundColor DB
    ArrowColor #555555
    BorderColor #555555
}

package "Discord API" <<EXTERNAL>> {
  class Client
  class GuildMember
  class Message
  class User
  class Interaction
}

package "Supabase" <<EXTERNAL>> {
    database verification_events as DB_VE <<DB>>
    database admin_actions as DB_AA <<DB>>
    database detection_events as DB_DE <<DB>>
    database server_members as DB_SM <<DB>>
    database users as DB_U <<DB>>
    database servers as DB_S <<DB>>
    database verification_threads as DB_VT <<DB>>
    class SupabaseClient
}

package "Config" <<CONFIG>> {
    interface IConfigService
    class ConfigService implements IConfigService
    class GlobalConfig
}

package "Repositories" {
    class BaseRepository <<REPO>>
    class SupabaseRepository extends BaseRepository <<REPO>> {
        - supabaseClient: SupabaseClient
    }

    interface IVerificationEventRepository <<REPO>>
    class VerificationEventRepository extends SupabaseRepository implements IVerificationEventRepository <<REPO>>
    VerificationEventRepository --> DB_VE : interacts with
    VerificationEventRepository ..> SupabaseClient : uses

    interface IAdminActionRepository <<REPO>>
    class AdminActionRepository extends SupabaseRepository implements IAdminActionRepository <<REPO>>
    AdminActionRepository --> DB_AA : interacts with
    AdminActionRepository ..> SupabaseClient : uses

    interface IDetectionEventsRepository <<REPO>>
    class DetectionEventsRepository extends SupabaseRepository implements IDetectionEventsRepository <<REPO>>
    DetectionEventsRepository --> DB_DE : interacts with
    DetectionEventsRepository ..> SupabaseClient : uses

    interface IServerMemberRepository <<REPO>>
    class ServerMemberRepository extends SupabaseRepository implements IServerMemberRepository <<REPO>>
    ServerMemberRepository --> DB_SM : interacts with
    ServerMemberRepository ..> SupabaseClient : uses

    interface IUserRepository <<REPO>>
    class UserRepository extends SupabaseRepository implements IUserRepository <<REPO>>
    UserRepository --> DB_U : interacts with
    UserRepository ..> SupabaseClient : uses

    interface IServerRepository <<REPO>>
    class ServerRepository extends SupabaseRepository implements IServerRepository <<REPO>>
    ServerRepository --> DB_S : interacts with
    ServerRepository ..> SupabaseClient : uses
}

package "Utils" <<UTIL>> {
    class DetectionHistoryFormatter
    class VerificationHistoryFormatter
}

package "Services" {
    interface IHeuristicService <<SERVICE>>
    class HeuristicService implements IHeuristicService <<SERVICE>>

    interface IGPTService <<SERVICE>>
    class GPTService implements IGPTService <<SERVICE>>

    interface IDetectionOrchestrator <<SERVICE>>
    class DetectionOrchestrator implements IDetectionOrchestrator <<SERVICE>> {
        - heuristicService: IHeuristicService
        - gptService: IGPTService
        - detectionEventsRepository: IDetectionEventsRepository
    }
    DetectionOrchestrator ..> IHeuristicService
    DetectionOrchestrator ..> IGPTService
    DetectionOrchestrator ..> IDetectionEventsRepository

    interface IRoleManager <<SERVICE>>
    class RoleManager implements IRoleManager <<SERVICE>> {
        - client: Client
        - configService: IConfigService
    }
    RoleManager ..> Client
    RoleManager ..> IConfigService

    interface INotificationManager <<SERVICE>>
    class NotificationManager implements INotificationManager <<SERVICE>> {
        - client: Client
        - configService: IConfigService
        - verificationEventRepository: IVerificationEventRepository
        - userService: IUserService
        - serverService: IServerService
        - detectionEventsRepository: IDetectionEventsRepository
        - verificationService: IVerificationService
        - adminActionService: IAdminActionService
    }
    NotificationManager ..> Client
    NotificationManager ..> IConfigService
    NotificationManager ..> IVerificationEventRepository
    NotificationManager ..> IUserService
    NotificationManager ..> IServerService
    NotificationManager ..> IDetectionEventsRepository
    NotificationManager ..> IVerificationService
    NotificationManager ..> IAdminActionService
    NotificationManager ..> VerificationHistoryFormatter
    NotificationManager ..> DetectionHistoryFormatter

    interface IVerificationService <<SERVICE>>
    class VerificationService implements IVerificationService <<SERVICE>> {
        - verificationEventRepository: IVerificationEventRepository
        - adminActionRepository: IAdminActionRepository
        - userRepository: IUserRepository
        - serverRepository: IServerRepository
        - roleManager: IRoleManager
        - serverMemberRepository: IServerMemberRepository
    }
    VerificationService ..> IVerificationEventRepository
    VerificationService ..> IAdminActionRepository
    VerificationService ..> IUserRepository
    VerificationService ..> IServerRepository
    VerificationService ..> IRoleManager
    VerificationService ..> IServerMemberRepository

    interface IAdminActionService <<SERVICE>>
    class AdminActionService implements IAdminActionService <<SERVICE>> {
       - adminActionRepository: IAdminActionRepository
    }
    AdminActionService ..> IAdminActionRepository


    interface IUserModerationService <<SERVICE>>
    class UserModerationService implements IUserModerationService <<SERVICE>> {
        - configService: IConfigService
        - serverMemberRepository: IServerMemberRepository
        - notificationManager: INotificationManager
        - roleManager: IRoleManager
        - verificationEventRepository: IVerificationEventRepository
        - verificationService: IVerificationService
    }
    UserModerationService ..> IConfigService
    UserModerationService ..> IServerMemberRepository : uses (restrictUser)
    UserModerationService ..> INotificationManager : uses (logging)
    UserModerationService ..> IRoleManager : uses (restrictUser)
    UserModerationService ..> IVerificationEventRepository : uses (finding event)
    UserModerationService ..> IVerificationService : uses (verifyUser, rejectUser)

    interface IUserService <<SERVICE>>
    class UserService implements IUserService <<SERVICE>> {
        - userRepository: IUserRepository
        - serverMemberRepository: IServerMemberRepository
    }
    UserService ..> IUserRepository
    UserService ..> IServerMemberRepository

     interface IServerService <<SERVICE>>
    class ServerService implements IServerService <<SERVICE>> {
        - serverRepository: IServerRepository
    }
    ServerService ..> IServerRepository


    interface ISecurityActionService <<SERVICE>>
    class SecurityActionService implements ISecurityActionService <<SERVICE>> {
        - notificationManager: INotificationManager
        - detectionEventsRepository: IDetectionEventsRepository
        - serverMemberRepository: IServerMemberRepository
        - userService: IUserService
        - serverService: IServerService
        - userModerationService: IUserModerationService
        - verificationService: IVerificationService
        - verificationEventRepository: IVerificationEventRepository
        - client: Client
    }
    SecurityActionService ..> INotificationManager
    SecurityActionService ..> IDetectionEventsRepository
    SecurityActionService ..> IServerMemberRepository : uses (ensureEntitiesExist)
    SecurityActionService ..> IUserService
    SecurityActionService ..> IServerService
    SecurityActionService ..> IUserModerationService : uses (initialize)
    SecurityActionService ..> IVerificationService
    SecurityActionService ..> IVerificationEventRepository
    SecurityActionService ..> Client

}

package "Application" {
    class Bot {
      - client: Client
      - heuristicService: IHeuristicService
      - gptService: IGPTService
      - detectionOrchestrator: IDetectionOrchestrator
      - roleManager: IRoleManager
      - notificationManager: INotificationManager
      - configService: IConfigService
      - detectionEventsRepository: IDetectionEventsRepository
      - userRepository: IUserRepository
      - serverRepository: IServerRepository
      - serverMemberRepository: IServerMemberRepository
      - securityActionService: ISecurityActionService
      - userModerationService: IUserModerationService
      - verificationService: IVerificationService
      - adminActionService: IAdminActionService
    }

    Bot ..> Client : uses
    Bot ..> Interaction : handles
    Bot ..> Message : handles
    Bot ..> GuildMember : handles
    Bot ..> User : handles
    Bot ..> IHeuristicService
    Bot ..> IGPTService
    Bot ..> IDetectionOrchestrator
    Bot ..> IRoleManager
    Bot ..> INotificationManager
    Bot ..> IConfigService
    Bot ..> IDetectionEventsRepository
    Bot ..> IUserRepository
    Bot ..> IServerRepository
    Bot ..> IServerMemberRepository
    Bot ..> ISecurityActionService
    Bot ..> IUserModerationService
    Bot ..> IVerificationService
    Bot ..> IAdminActionService
    Bot ..> VerificationHistoryFormatter
}

Bot --> IDetectionOrchestrator : delegates message/join analysis
IDetectionOrchestrator --> ISecurityActionService : triggers actions on suspicious result (via Bot)
Bot --> ISecurityActionService : delegates suspicious result handling

SecurityActionService --> IVerificationService : creates verification event
SecurityActionService --> INotificationManager : sends initial notification
SecurityActionService --> IVerificationEventRepository : updates event with msg ID

Bot --> IUserModerationService : handles /verify, /ban commands
Bot --> IVerificationService : handles verify/ban/reopen buttons

UserModerationService --> IVerificationService : handles status changes for commands
UserModerationService --> INotificationManager : logs actions to message

@enduml 